const yargs = require('yargs')
const { promisify } = require('util')
const inquirer = require('inquirer')
const MainFunction = require('../lib/src/main')

const licenses = [
	'agpl-3.0',
	'apache-2.0',
	'bsd-2-clause',
	'bsd-3-clause',
	'bsl-1.0',
	'cc0-1.0',
	'epl-2.0',
	'gpl-2.0',
	'gpl-3.0',
	'lgpl-2.1',
	'mit',
	'mpl-2.0',
	'unlicense',
]

const templateOptions = []

try {
	inquirer
		.prompt({
			type: 'list',
			name: 'choice',
			message: 'Choise project template to use.',
			choices: ['express', 'other'],
			default: 'express',
		})
		.then((answers) => {
			const output = answers[Object.keys(answers)[0]]
			if (output == 'express') {
				templateOptions.type = output
				inquirer
					.prompt([
						{
							type: 'list',
							name: 'choice-license',
							message: 'Choise license you want to use.',
							choices: licenses,
							default: 'none',
						},
					])
					.then((answers) => {
						templateOptions.license = answers[Object.keys(answers)[0]]
						inquirer
							.prompt([
								{
									type: 'list',
									name: 'choice-gitignore',
									message: 'Choise do you want gitignore or not.',
									choices: ['yes', 'no'],
									default: 'yes',
								},
							])
							.then((answers) => {
								const option = answers[Object.keys(answers)[0]] ? true : false
								templateOptions.gitignore = option

								MainFunction.createProject(templateOptions)
							})
							.catch((error) => {
								if (error.isTtyError) {
									throw new Error(
										`Prompt couldn't be rendered in the current environment`
									)
								} else {
									throw new Error(error)
								}
							})
					})
					.catch((error) => {
						if (error.isTtyError) {
							throw new Error(
								`Prompt couldn't be rendered in the current environment`
							)
						} else {
							throw new Error(error)
						}
					})
			}
		})
		.catch((error) => {
			if (error.isTtyError) {
				throw new Error(
					`Prompt couldn't be rendered in the current environment`
				)
			} else {
				throw new Error(error)
			}
		})
} catch (error) {
	throw new Error(error)
}

//create-template generate
